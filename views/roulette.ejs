<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Satsuya Casino - Roulette</title>
    
    <style>
        *, *::before, *::after { box-sizing: border-box; }
        body { background-color: #1a1a2e; color: white; margin: 0; font-family: sans-serif; }
        .roulette-container { display: flex; flex-direction: column; align-items: center; gap: 2rem; margin: 2rem auto; padding: 0 1rem; max-width: 1200px; }
        .wheel-container { position: relative; width: 90vw; max-width: 450px; aspect-ratio: 1 / 1; display: flex; justify-content: center; align-items: center; }
        .pointer { position: absolute; top: -15px; left: 50%; transform: translateX(-50%); width: 0; height: 0; border-left: 15px solid transparent; border-right: 15px solid transparent; border-top: 30px solid #f1c40f; z-index: 20; }
        .roulette-wheel {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            position: relative;
            border: 10px solid #792074;
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
            transition: transform 6s cubic-bezier(0.25, 0.1, 0.25, 1);
            background: conic-gradient(
                #0a5c36 0% 2.7%, #a10000 2.7% 5.4%, #2f3542 5.4% 8.1%, #a10000 8.1% 10.8%, #2f3542 10.8% 13.5%, #a10000 13.5% 16.2%, #2f3542 16.2% 18.9%, #a10000 18.9% 21.6%, #2f3542 21.6% 24.3%, #a10000 24.3% 27%, #2f3542 27% 29.7%, #a10000 29.7% 32.4%, #2f3542 32.4% 35.1%, #a10000 35.1% 37.8%, #2f3542 37.8% 40.5%, #a10000 40.5% 43.2%, #2f3542 43.2% 45.9%, #a10000 45.9% 48.6%, #2f3542 48.6% 51.3%, #a10000 51.3% 54%, #2f3542 54% 56.7%, #a10000 56.7% 59.4%, #2f3542 59.4% 62.1%, #a10000 62.1% 64.8%, #2f3542 64.8% 67.5%, #a10000 67.5% 70.2%, #2f3542 70.2% 72.9%, #a10000 72.9% 75.6%, #2f3542 75.6% 78.3%, #a10000 78.3% 81%, #2f3542 81% 83.7%, #a10000 83.7% 86.4%, #2f3542 86.4% 89.1%, #a10000 89.1% 91.8%, #2f3542 91.8% 94.5%, #a10000 94.5% 97.2%, #2f3542 97.2% 100%
            );
        }
        
        /* Diese Klasse wird jetzt verwendet, um die Zahlen zu stylen */
        .wheel-number {
            position: absolute;
            top: 50%;
            left: 50%;
            transform-origin: center center;
            width: 30px;
            height: 30px;
            margin-left: -15px;
            margin-top: -15px;
            line-height: 30px;
            color: white;
            font-size: 16px;
            font-weight: bold;
            text-align: center;
            z-index: 10;
        }

        .wheel-center { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 80px; height: 80px; background: #f1c40f; border-radius: 50%; border: 5px solid #792074; z-index: 5; }
        .betting-panel { width: 100%; max-width: 600px; background-color: #16213e; padding: 1.5rem; border-radius: 8px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); }
        .bet-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 5px; margin-bottom: 1rem; }
        .bet-btn { padding: 0.75rem 0.5rem; text-align: center; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: bold; transition: background-color 0.3s, transform 0.2s; }
        .bet-btn:hover { transform: scale(1.05); }
        .bet-btn.selected { transform: scale(1.1); box-shadow: 0 0 10px #f1c40f; }
        .number-btn[data-bet='0'] { grid-column: 1 / -1; background-color: #0a5c36; }
        .red-btn { background-color: #a10000; }
        .black-btn { background-color: #2f3542; }
        .color-bet-group { grid-column: 1 / -1; display: flex; gap: 5px; }
        .color-btn { flex: 1; }
        .bet-controls { display: flex; gap: 1rem; align-items: center; justify-content: center; margin-top: 1rem; }
        .bet-amount { padding: 0.5rem; border: 1px solid #792074; border-radius: 4px; background-color: #1a1a2e; color: white; width: 100px; font-size: 1rem; }
        #spin-btn { padding: 0.75rem 1.5rem; background-color: #f1c40f; color: #16213e; font-weight: bold; font-size: 1rem; border: none; border-radius: 5px; cursor: pointer; transition: background-color 0.3s; }
        #spin-btn:disabled { background-color: #555; cursor: not-allowed; }
        #spin-btn:not(:disabled):hover { background-color: #ffde59; }
        #result { margin-top: 1rem; padding: 1rem; border-radius: 4px; text-align: center; font-size: 1.2rem; font-weight: bold; display: none; }
        .win { display: block; background-color: rgba(76, 175, 80, 0.3); color: #4CAF50; border: 1px solid #4CAF50; }
        .lose { display: block; background-color: rgba(255, 107, 107, 0.3); color: #ff6b6b; border: 1px solid #ff6b6b; }
    </style>
</head>
<body>
    <div class="roulette-container">
        <h1>Roulette</h1>
        <p>Guthaben: $<span id="balance"><%= user.balance %></span></p>

        <div class="wheel-container">
            <div class="pointer"></div>
            <div class="roulette-wheel" id="wheel">
                </div>
            <div class="wheel-center"></div>
        </div>

        <div class="betting-panel">
            <div class="bet-grid" id="bet-grid">
                <div class="color-bet-group">
                    <button class="bet-btn red-btn color-btn" data-bet="red">ROT</button>
                    <button class="bet-btn black-btn color-btn" data-bet="black">SCHWARZ</button>
                </div>
            </div>
            <div class="bet-controls">
                <label for="amount">Einsatz:</label>
                <input type="number" id="amount" class="bet-amount" value="10" min="1">
                <button id="spin-btn" disabled>Drehen</button>
            </div>
            <div id="result"></div>
        </div>
    </div>

    <script>
        const spinBtn = document.getElementById('spin-btn');
        const wheel = document.getElementById('wheel');
        const betGrid = document.getElementById('bet-grid');
        const resultDiv = document.getElementById('result');
        const balanceSpan = document.getElementById('balance');
        
        let selectedBet = null;
        let currentRotation = 0;
        
        const numbersOrder = [0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26];
        const anglePerSegment = 360 / numbersOrder.length;

        // NEU: Zahlen auf dem Rad generieren und positionieren
        const wheelRadius = wheel.offsetWidth / 2 - 25; // -25px um die Zahl etwas nach innen zu rücken
        numbersOrder.forEach((num, index) => {
            const angle = index * anglePerSegment + (anglePerSegment / 2); // In die Mitte des Segments
            const numberDiv = document.createElement('div');
            numberDiv.classList.add('wheel-number');
            numberDiv.textContent = num;
            
            // Positionieren der Zahl im Kreis
            const rotationAngle = angle;
            const textRotationAngle = -angle; // Die Zahl selbst zurückdrehen, damit sie gerade bleibt
            
            numberDiv.style.transform = `rotate(${rotationAngle}deg) translateY(-${wheelRadius}px) rotate(${textRotationAngle}deg)`;
            wheel.appendChild(numberDiv);
        });

        // Wett-Buttons generieren
        const redNumbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];
        for (let i = 1; i <= 36; i++) {
            const btn = document.createElement('button');
            btn.classList.add('bet-btn', 'number-btn');
            btn.classList.add(redNumbers.includes(i) ? 'red-btn' : 'black-btn');
            btn.dataset.bet = i;
            btn.textContent = i;
            betGrid.appendChild(btn);
        }
        const zeroBtn = document.createElement('button');
        zeroBtn.classList.add('bet-btn', 'number-btn');
        zeroBtn.dataset.bet = '0';
        zeroBtn.textContent = '0';
        betGrid.appendChild(zeroBtn);

        // Event Listeners und Spiellogik (unverändert)
        betGrid.addEventListener('click', (e) => {
            if (e.target.classList.contains('bet-btn')) {
                const currentSelected = document.querySelector('.bet-btn.selected');
                if (currentSelected) {
                    currentSelected.classList.remove('selected');
                }
                e.target.classList.add('selected');
                selectedBet = e.target.dataset.bet;
                spinBtn.disabled = false;
            }
        });

        spinBtn.addEventListener('click', async () => {
            const amount = document.getElementById('amount').value;
            if (!selectedBet || !amount || amount <= 0) {
                alert("Bitte wählen Sie eine Wette und einen gültigen Einsatz.");
                return;
            }

            spinBtn.disabled = true;
            resultDiv.style.display = 'none';
            resultDiv.className = '';

            const response = await fetch('/roulette/bet', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ amount, bet: selectedBet })
            });
            const result = await response.json();
            
            if (!result.success) {
                alert(`Fehler: ${result.error}`);
                spinBtn.disabled = false;
                return;
            }

            const numberToAngle = new Map();
            numbersOrder.forEach((num, index) => {
                numberToAngle.set(num, index * anglePerSegment);
            });

            const targetAngle = numberToAngle.get(result.winningNumber);
            // const randomOffset = (Math.random() - 0.5) * anglePerSegment * 0.8; // Entfernen oder auskommentieren
            const fullRotations = 5 * 360;
            // currentRotation += fullRotations - (currentRotation % 360) + 360 - targetAngle + randomOffset; // Alte Berechnung
            currentRotation += fullRotations - (currentRotation % 360) + 360 - targetAngle - (anglePerSegment / 2); // Angepasste Berechnung für die Mitte des Segments
            
            wheel.style.transform = `rotate(${currentRotation}deg)`;

            setTimeout(() => {
                resultDiv.textContent = result.message;
                resultDiv.classList.add(result.win ? 'win' : 'lose');
                resultDiv.style.display = 'block';
                balanceSpan.textContent = result.newBalance;
                
                const currentSelected = document.querySelector('.bet-btn.selected');
                if (currentSelected) {
                    currentSelected.classList.remove('selected');
                }
                selectedBet = null;
            }, 6500);
        });
    </script>
</body>
</html>